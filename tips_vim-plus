general mode/edit mode/command mode
change mode from general to edit: press any of i,I,a,A,o,O,r,R
from general to command: press : or /

switch tabs in vim
open a new file within the current vim tab :tabnew filename
Why not use tabs (introduced in Vim 7)? You can switch between tabs with :tabn and :tabp, With  :tabe <filepath> 
you can add a new tab; and with a regular :q or :wq you close a tab. If you map :tabn and :tabp to your F7/F8 keys 
you can easily switch between files.

:split (split into two windows, top half and bottom half) and :vsplit (left and right) commands. 
You can then use Ctrl-W direction to switch windows (where direction is one of the normal hjkl cursor movement keys, or the arrow keys).
You can then :edit (etc.) a different file in each window.

if you're already editing multiple files in one window, you can use :ba to split horizontally or :vert ba to split vertically.
open multiple files in split mode: You can use the option -o to open the files in horizontal splits or -O to open vertical splits

Position the cursor where you want to begin cutting.
Press v to select characters (or uppercase V to select whole lines).
Move the cursor to the end of what you want to cut.
Press d to cut (or y to copy).
Move to where you would like to paste.
Press P to paste before the cursor, or p to paste after.
Copy and paste is performed with the same steps except for step 4 where you would press y instead of d:

d = delete = cut

y = yank = copy

gg move cursor to the top
G move cursor to the bottom

j go down;k go up;l move right;h move left

a Append text following current cursor position
A Append text to the end of current line
i Insert text before the current cursor position
I Insert text at the beginning of the cursor line
o Open up a new line following the current line and add text there
O Open up a new line in front of the current line and add text there

nG or :n Cursor goes to the specified (n) line
(ex. 10G goes to line 10)

$ Move cursor to the end of current line
0 (zero) Move cursor to the beginning of current line
% jump to match of next paren or bracket

https://www.radford.edu/~mhtay/CPSC120/VIM_Editor_Commands.htm


x delete one char
dd delete current line 3dd  delete 3 lines
s(subtitute) used to replace specified characters: 7s subtitute the next 7 chars; 3S 3 lines
S replace specified lines
r replace single char
u undo
Ctrl+r redo

aw: a word iw: inner word
dw will delete from the cursor to the end of the word
daw will delete the entire word along with a space
diw will delete the entire word without touching whitespace around it. 

motions: w/W b/B e/E(go to end of word/WORD right) w means any stream of non white space characters; W keyword inside vim

:set nu set line number (this feature is enabled in .vimrc)

:%s/foo/bar/g
Find each occurrence of 'foo' (in all lines), and replace it with 'bar'
:%s/foo/bar/gc
ask for confirmation before change
:%s/pattern//gn match pattern counts
To find a word in Vi/Vim, simply type the / or ? key, followed by the word you're searching for.
Once found, you can press the n key to go directly to the next occurrence of the word.

Vi/Vim also allows you to launch a search on the word over which your cursor is positioned. 
To do this, place the cursor over the term, and then press * or # to look it up.


command line: search previous commands Ctrl+r; 
move cursor to the begining/end of the line HOME/END or Ctrl+a/Ctrl+e

head command
head -1 file show only first line

u - user
g - group
o - other people

--------------------

chmod 754/644 filename

7,5,4 represent the individual permissions for u g o

4 - stands for "read"
2 - stands for "write"
1 - stands for "execute"
0 - stands for "no permissions"

history|grep XXX
